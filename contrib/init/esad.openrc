#!/sbin/runscript

# backward compatibility for existing gentoo layout 
#
if [ -d "/var/lib/aipg/.aipg" ]; then
	ESAD_DEFAULT_DATADIR="/var/lib/aipg/.aipg"
else
	ESAD_DEFAULT_DATADIR="/var/lib/esad"
fi

ESAD_CONFIGFILE=${ESAD_CONFIGFILE:-/etc/aipg/aipg.conf}
ESAD_PIDDIR=${ESAD_PIDDIR:-/var/run/esad}
ESAD_PIDFILE=${ESAD_PIDFILE:-${ESAD_PIDDIR}/esad.pid}
ESAD_DATADIR=${ESAD_DATADIR:-${ESAD_DEFAULT_DATADIR}}
ESAD_USER=${ESAD_USER:-${AIPG_USER:-aipg}}
ESAD_GROUP=${ESAD_GROUP:-aipg}
ESAD_BIN=${ESAD_BIN:-/usr/bin/esad}
ESAD_NICE=${ESAD_NICE:-${NICELEVEL:-0}}
ESAD_OPTS="${ESAD_OPTS:-${AIPG_OPTS}}"

name="Aipg Core Daemon"
description="Aipg cryptocurrency P2P network daemon"

command="/usr/bin/esad"
command_args="-pid=\"${ESAD_PIDFILE}\" \
		-conf=\"${ESAD_CONFIGFILE}\" \
		-datadir=\"${ESAD_DATADIR}\" \
		-daemon \
		${ESAD_OPTS}"

required_files="${ESAD_CONFIGFILE}"
start_stop_daemon_args="-u ${ESAD_USER} \
			-N ${ESAD_NICE} -w 2000"
pidfile="${ESAD_PIDFILE}"

# The retry schedule to use when stopping the daemon. Could be either
# a timeout in seconds or multiple signal/timeout pairs (like
# "SIGKILL/180 SIGTERM/300")
retry="${ESAD_SIGTERM_TIMEOUT}"

depend() {
	need localmount net
}

# verify
# 1) that the datadir exists and is writable (or create it)
# 2) that a directory for the pid exists and is writable
# 3) ownership and permissions on the config file
start_pre() {
	checkpath \
	-d \
	--mode 0750 \
	--owner "${ESAD_USER}:${ESAD_GROUP}" \
	"${ESAD_DATADIR}"

	checkpath \
	-d \
	--mode 0755 \
	--owner "${ESAD_USER}:${ESAD_GROUP}" \
	"${ESAD_PIDDIR}"

	checkpath -f \
	-o ${ESAD_USER}:${ESAD_GROUP} \
	-m 0660 \
	${ESAD_CONFIGFILE}

	checkconfig || return 1
}

checkconfig()
{
	if ! grep -qs '^rpcpassword=' "${ESAD_CONFIGFILE}" ; then
		eerror ""
		eerror "ERROR: You must set a secure rpcpassword to run esad."
		eerror "The setting must appear in ${ESAD_CONFIGFILE}"
		eerror ""
		eerror "This password is security critical to securing wallets "
		eerror "and must not be the same as the rpcuser setting."
		eerror "You can generate a suitable random password using the following "
		eerror "command from the shell:"
		eerror ""
		eerror "bash -c 'tr -dc a-zA-Z0-9 < /dev/urandom | head -c32 && echo'"
		eerror ""
		eerror "It is recommended that you also set alertnotify so you are "
		eerror "notified of problems:"
		eerror ""
		eerror "ie: alertnotify=echo %%s | mail -s \"Aipg Alert\"" \
			"admin@foo.com"
		eerror ""
		return 1
	fi
}
